# ü§ñ JEEX Plan - CodeRabbit Configuration
# Focus: Security, Architecture, Critical Issues Only
# Philosophy: Find real problems, not style preferences

reviews:
  # Assertive profile for thorough analysis
  profile: "assertive"

  # Auto-review settings
  auto_review:
    enabled: true
    drafts: false
    base_branches: ["master", "main", "develop"]

  # Review features
  high_level_summary: true
  poem: false  # Disabled - focus on substance
  review_status: true
  request_changes_workflow: false
  collapse_walkthrough: false

  # Toolchain integration - CRITICAL ONLY
  tools:
    # Security scanning (CRITICAL)
    gitleaks:
      enabled: true

    # Backend critical checks
    ruff:
      enabled: true
    sqlfluff:
      enabled: true

    # Frontend critical checks
    eslint:
      enabled: true
    biome:
      enabled: true

    # Infrastructure security
    hadolint:
      enabled: true
    checkov:
      enabled: true

    # Disabled tools (covered by linters/formatters)
    shellcheck:
      enabled: false  # Not critical for this project
    markdownlint:
      enabled: false  # Style, not security
    actionlint:
      enabled: false  # Covered by CI
    oxc:
      enabled: false  # Redundant with biome/eslint

  # üìÅ CRITICAL ISSUES ONLY - Path-specific instructions
  path_instructions:
    # üö® GLOBAL CRITICAL RULES - ALL FILES
    - path: "**/*.{py,ts,tsx,js,jsx}"
      instructions: |
        üö® **ZERO-TOLERANCE VIOLATIONS** (BLOCK IMMEDIATELY):

        **1. FALLBACKS, MOCKS, STUBS in Production Code:**
        ```python
        # ‚ùå CRITICAL - Default tenant fallback
        if not tenant_id:
            tenant_id = get_default_tenant()  # BLOCK!

        # ‚ùå CRITICAL - String conversion fallback
        return str(value)  # Lossy conversion - BLOCK!

        # ‚ùå CRITICAL - Mock/stub implementation
        async def send_email(...):
            logger.info("Email sent")  # Not actually sending - BLOCK!
            return True

        # ‚ùå CRITICAL - Placeholder values
        API_KEY = "placeholder-key"  # BLOCK!
        ```

        **2. SECURITY VIOLATIONS:**
        - SQL injection vulnerabilities (raw SQL, string formatting)
        - Hardcoded secrets (API keys, passwords, tokens)
        - Missing tenant_id in multi-tenant queries
        - XSS vulnerabilities (unsanitized user input)
        - CSRF token missing on state-changing operations
        - Authentication bypass (missing auth checks)

        **3. DATA LEAKS:**
        - Cross-tenant data access
        - Missing tenant filtering in queries
        - Tenant ID not validated in requests
        - Sensitive data in logs (passwords, tokens, PII)

        **4. CRITICAL BUGS:**
        - Race conditions in concurrent code
        - Unhandled exceptions in async code
        - Resource leaks (unclosed connections, files)
        - Infinite loops or recursion without exit

        **ALLOWED (Not Critical):**
        - TODO/FIXME comments (better explicit than hidden fallback)
        - NotImplementedError for planned features
        - Architectural patterns: Vault‚ÜíEnv, JWT‚ÜíHeaders, Tenant‚ÜíIP

        **DO NOT REPORT:**
        - Code style issues (handled by formatters)
        - Minor refactoring suggestions
        - Variable naming (unless truly confusing)
        - Comment formatting
        - Import ordering (handled by tools)

    # üîê AUTHENTICATION & AUTHORIZATION
    - path: "backend/app/core/{auth,oauth,token_service}.py"
      instructions: |
        üîê **AUTHENTICATION CRITICAL CHECKS:**

        **MUST VERIFY:**
        - JWT token validation is complete (signature, expiration, issuer)
        - Timing-safe token comparison (no early returns)
        - Session management (proper cleanup, expiration)
        - Password reset flows are secure (token entropy, single-use)
        - Rate limiting on auth endpoints (prevent brute force)
        - **CRITICAL**: tenant_id in ALL auth flows (no default tenant!)

        **SECURITY VIOLATIONS:**
        - Missing tenant_id validation
        - Weak token generation (predictable)
        - Password in plain text (logs, storage)
        - Missing rate limits
        - Timing attacks possible

    # üóÑÔ∏è DATABASE & MODELS
    - path: "backend/app/models/**/*.py"
      instructions: |
        üóÑÔ∏è **DATABASE MODEL CRITICAL CHECKS:**

        **MUST VERIFY:**
        - tenant_id field exists in ALL tenant-scoped models
        - Foreign keys respect tenant boundaries
        - Indexes on tenant_id + commonly filtered fields
        - Soft delete consistency (deleted_at field)

        **BLOCK IF:**
        - Missing tenant_id in tenant-scoped model
        - Foreign key without tenant_id validation
        - No index on tenant_id (performance issue)

    # üìä REPOSITORIES & DATA ACCESS
    - path: "backend/app/repositories/**/*.py"
      instructions: |
        üìä **REPOSITORY CRITICAL CHECKS:**

        **MUST VERIFY:**
        - ALL queries include tenant_id filter
        - No SQL injection (use prepared statements)
        - N+1 query prevention (eager loading)
        - Transaction management (rollback on error)

        **BLOCK IF:**
        - Query missing tenant_id filter
        - Raw SQL with string formatting
        - Missing error handling in database operations

    # üåê API ENDPOINTS
    - path: "backend/app/api/**/*.py"
      instructions: |
        üåê **API ENDPOINT CRITICAL CHECKS:**

        **MUST VERIFY:**
        - Input validation (Pydantic models)
        - Authentication required (no anonymous access to sensitive data)
        - Authorization checks (user can access resource)
        - tenant_id extracted from JWT and validated
        - Rate limiting on expensive operations

        **BLOCK IF:**
        - Missing input validation
        - Missing authentication check
        - Missing tenant_id validation
        - Sensitive data in error messages

    # ‚öõÔ∏è FRONTEND COMPONENTS
    - path: "frontend/src/{components,hooks,services}/**/*.{ts,tsx}"
      instructions: |
        ‚öõÔ∏è **FRONTEND CRITICAL CHECKS:**

        **MUST VERIFY:**
        - XSS prevention (sanitize user input before rendering)
        - No secrets in client code (API keys, tokens)
        - Proper error handling (don't expose stack traces)
        - Authentication state management
        - CSRF token in state-changing requests

        **BLOCK IF:**
        - Dangerously set inner HTML without sanitization
        - API keys or secrets in code
        - Missing error boundaries
        - Sensitive data in localStorage (use httpOnly cookies)

    # üê≥ DOCKER & INFRASTRUCTURE
    - path: "{docker-compose.yml,Dockerfile,*.Dockerfile}"
      instructions: |
        üê≥ **DOCKER SECURITY CHECKS:**

        **MUST VERIFY:**
        - Non-root user (no USER root)
        - No hardcoded secrets (use environment variables)
        - Health checks defined
        - Resource limits set (prevent DoS)

        **BLOCK IF:**
        - Running as root
        - Secrets in Dockerfile
        - Missing health checks on critical services

    # üîÑ CI/CD PIPELINES
    - path: ".github/workflows/**/*.yml"
      instructions: |
        üîÑ **CI/CD SECURITY CHECKS:**

        **MUST VERIFY:**
        - Secrets use GitHub Secrets (not hardcoded)
        - Minimal GITHUB_TOKEN permissions
        - Dependency vulnerability scanning enabled
        - Security gates in deployment pipeline

        **BLOCK IF:**
        - Hardcoded credentials
        - Overly permissive token
        - Missing security scans

# üí¨ Chat integration
chat:
  auto_reply: true

# üß† Knowledge base
knowledge_base:
  learnings:
    scope: "auto"
  web_search:
    enabled: true

# ü§ñ Code generation (disabled - we prefer explicit code)
code_generation:
  docstrings: {}
  unit_tests: {}

# üåç Configuration
language: "en"
early_access: true

# üéØ CRITICAL FOCUS - Custom instructions
tone_instructions: "Focus on security vulnerabilities, data leaks, production fallbacks/mocks, and critical bugs. Ignore style issues. Be direct and cite line numbers."