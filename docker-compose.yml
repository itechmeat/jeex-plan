# Production-ready Docker Compose configuration
# Version: Use latest Compose spec (no explicit version needed for modern Docker)
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "100m"
    max-file: "10"
    labels: "service,environment"

x-common-deploy: &default-deploy
  resources:
    limits:
      cpus: '2'
      memory: 2G
    reservations:
      cpus: '0.25'
      memory: 256M

x-common-restart: &default-restart
  restart: unless-stopped

services:
  # Backend API - FastAPI
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5210:8000" # External:5210 -> Internal:8000
    env_file:
      - ./.env
    environment:
      # Override specific URLs for Docker internal communication
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - QDRANT_URL=http://qdrant:6333
      - VAULT_ADDR=http://vault:8200
    volumes:
      - ./backend:/app
      - ./docs:/docs:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      <<: *default-deploy
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    <<: *default-restart
    logging: *default-logging
    healthcheck:
      test:
        - CMD
        - python
        - -c
        - |
          import sys, urllib.request
          sys.exit(0 if urllib.request.urlopen(
            'http://localhost:8000/api/v1/health', timeout=5
          ).status == 200 else 1)
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - frontend-network
      - backend-network

  # PostgreSQL - Primary Database
  postgres:
    image: postgres:18-alpine
    # Comment out ports in production - only expose internally
    # ports:
    #   - "5220:5432" # Development only - remove in production
    env_file:
      - ./.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    deploy:
      <<: *default-deploy
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    <<: *default-restart
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network
      - data-network

  # Qdrant - Vector Database
  qdrant:
    image: qdrant/qdrant:v1.15.4
    # Remove external port mapping - internal only
    # ports:
    #   - "5230:6333" # Development only - remove in production
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
      - QDRANT__SERVICE__API_KEY=${QDRANT_API_KEY}
    volumes:
      - qdrant_data:/qdrant/storage
      - ./backend/config/qdrant.yaml:/qdrant/config/production.yaml:ro
    deploy:
      <<: *default-deploy
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    <<: *default-restart
    logging: *default-logging
    healthcheck:
      test:
        - CMD-SHELL
        - >
          timeout 5 bash -c '</dev/tcp/localhost/6333' || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend-network
      - data-network

  # Redis - Cache and Queue
  redis:
    image: redis:8.2.1-alpine3.22
    # Remove external port mapping - internal only
    # ports:
    #   - "5240:6379" # Development only - remove in production
    env_file:
      - ./.env
    command: ["/etc/redis/redis-start.sh"]
    volumes:
      - redis_data:/data
      - ./backend/config/redis.conf:/etc/redis/redis.conf:ro
      - ./backend/config/redis-start.sh:/etc/redis/redis-start.sh
    deploy:
      <<: *default-deploy
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M
    <<: *default-restart
    logging: *default-logging
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - backend-network
      - data-network

  # HashiCorp Vault - Secrets Management
  vault:
    image: hashicorp/vault:1.15.4
    # Remove external port mapping in production
    # ports:
    #   - "5250:8200" # Development only - remove in production
    cap_add:
      - IPC_LOCK
    env_file:
      - ./.env
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
      - VAULT_LOCAL_CONFIG=/vault/config/vault.hcl
    volumes:
      - vault_data:/vault/data
      - ./backend/config/vault.hcl:/vault/config/vault.hcl:ro
    command: ["vault", "server", "-config=/vault/config/vault.hcl"]
    deploy:
      <<: *default-deploy
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M
    <<: *default-restart
    logging: *default-logging
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend-network
      - data-network

  # OpenTelemetry Collector - Observability
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.103.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./backend/config/otel-collector-minimal.yaml:/etc/otel-collector-config.yaml:ro
    # Only expose ports if external access is required for development
    # ports:
    #   - "127.0.0.1:4318:4318"  # OTLP HTTP receiver - localhost only
    #   - "127.0.0.1:4317:4317"  # OTLP gRPC receiver - localhost only
    #   - "127.0.0.1:8888:8888"  # Metrics endpoint - localhost only
    depends_on:
      - api
    deploy:
      <<: *default-deploy
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    <<: *default-restart
    logging: *default-logging
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:13133/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend-network

  # Nginx - Reverse Proxy
  nginx:
    image: nginx:1.27-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    deploy:
      <<: *default-deploy
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    <<: *default-restart
    logging: *default-logging
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - frontend-network
      - backend-network

volumes:
  postgres_data:
    driver: local
    # Consider using cloud provider volumes for production
    # driver_opts:
    #   type: "ebs"
    #   size: "100"
  qdrant_data:
    driver: local
    # Add backup and encryption for production
  redis_data:
    driver: local
    # Consider Redis persistence settings for production
  vault_data:
    driver: local
    # Vault data should be backed up regularly

networks:
  # Frontend network - exposed services
  frontend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24

  # Backend network - internal services
  backend-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.1.0/24

  # Data network - databases and storage
  data-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.2.0/24