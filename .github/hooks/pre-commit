#!/bin/bash

# Pre-commit hook for JEEX Plan project
# Runs linting checks for both frontend and backend before allowing commit

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}üîç Running pre-commit checks for entire project...${NC}"

# Check if we're in the project root
if [ ! -f "jeex-plan.code-workspace" ]; then
    echo -e "${RED}‚ùå Please run from project root directory${NC}"
    exit 1
fi

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check if required tools are available
if ! command_exists pnpm; then
    echo -e "${RED}‚ùå pnpm not found. Please install pnpm first.${NC}"
    exit 1
fi

if ! command_exists docker-compose; then
    echo -e "${RED}‚ùå docker-compose not found. Please install Docker first.${NC}"
    exit 1
fi

# Check if backend is running
if ! docker-compose ps api | grep -q "Up"; then
    echo -e "${YELLOW}‚ö†Ô∏è  Backend not running. Starting services...${NC}"
    docker-compose up -d
    # Wait a bit for services to start
    sleep 5
fi

echo -e "${YELLOW}üìù Frontend checks...${NC}"

echo -e "${YELLOW}  ‚Ä¢ Checking JavaScript/TypeScript with Biome...${NC}"
if ! (cd frontend && pnpm run lint:js); then
    echo -e "${RED}‚ùå JavaScript/TypeScript linting failed!${NC}"
    echo -e "${YELLOW}üí° Fix errors with: ${GREEN}cd frontend && pnpm run lint:js:fix${NC}"
    exit 1
fi

echo -e "${YELLOW}  ‚Ä¢ Checking CSS with Stylelint...${NC}"
if ! (cd frontend && pnpm run lint:styles); then
    echo -e "${RED}‚ùå CSS linting failed!${NC}"
    echo -e "${YELLOW}üí° Fix errors with: ${GREEN}cd frontend && pnpm run lint:styles:fix${NC}"
    exit 1
fi

echo -e "${YELLOW}  ‚Ä¢ Checking TypeScript types...${NC}"
if ! (cd frontend && pnpm run type-check); then
    echo -e "${RED}‚ùå TypeScript type checking failed!${NC}"
    echo -e "${YELLOW}üí° Fix type errors manually and try again${NC}"
    exit 1
fi

echo -e "${YELLOW}  ‚Ä¢ Checking code formatting...${NC}"
if ! (cd frontend && pnpm run format:check); then
    echo -e "${RED}‚ùå Code formatting issues found!${NC}"
    echo -e "${YELLOW}üí° Fix formatting with: ${GREEN}cd frontend && pnpm run format${NC}"
    exit 1
fi

echo -e "${YELLOW}üìã Markdown checks...${NC}"

echo -e "${YELLOW}  ‚Ä¢ Checking Markdown files...${NC}"
if ! npx markdownlint-cli2; then
    echo -e "${RED}‚ùå Markdown linting failed!${NC}"
    echo -e "${YELLOW}üí° Fix errors with: ${GREEN}make markdown-fix${NC}"
    exit 1
fi

echo -e "${YELLOW}üóÉÔ∏è SQL checks...${NC}"

echo -e "${YELLOW}  ‚Ä¢ Checking SQL files with SQLFluff...${NC}"
if ! docker-compose exec -T api python -m sqlfluff lint .; then
    echo -e "${RED}‚ùå SQL linting failed!${NC}"
    echo -e "${YELLOW}üí° Fix errors with: ${GREEN}make sql-fix${NC}"
    exit 1
fi

echo -e "${YELLOW}üêç Backend checks...${NC}"

echo -e "${YELLOW}  ‚Ä¢ Checking Python code with Ruff...${NC}"
if ! docker-compose exec -T api ruff check app --extend-ignore E501,B904,BLE001,G201,ANN001,ANN002,ANN003,ANN201,ANN202,ANN205,RUF012,S101,S104,S105,S107,SIM102,SIM103,UP038,C901,RUF001; then
    echo -e "${RED}‚ùå Python linting failed!${NC}"
    echo -e "${YELLOW}üí° Fix errors with: ${GREEN}make lint-fix${NC}"
    exit 1
fi

echo -e "${YELLOW}  ‚Ä¢ Checking Python formatting...${NC}"
if ! docker-compose exec -T api ruff format . --check; then
    echo -e "${RED}‚ùå Python formatting issues found!${NC}"
    echo -e "${YELLOW}üí° Fix formatting with: ${GREEN}make format${NC}"
    exit 1
fi

echo -e "${YELLOW}  ‚Ä¢ Checking Python types with MyPy...${NC}"
if ! docker-compose exec -T api python -m mypy app/; then
    echo -e "${RED}‚ùå Python type checking failed!${NC}"
    echo -e "${YELLOW}üí° Fix type errors manually and try again${NC}"
    exit 1
fi

echo -e "${YELLOW}üê≥ Docker checks...${NC}"

echo -e "${YELLOW}  ‚Ä¢ Checking backend/Dockerfile...${NC}"
if ! docker run --rm -v $(pwd)/.hadolint.yaml:/.config/hadolint.yaml -i hadolint/hadolint < backend/Dockerfile; then
    echo -e "${RED}‚ùå Dockerfile linting failed!${NC}"
    echo -e "${YELLOW}üí° Check Docker best practices: ${GREEN}make docker-lint${NC}"
    echo -e "${YELLOW}üí° Run full security scan: ${GREEN}make security-scan${NC}"
    # Don't exit on Docker issues - just warn
fi

echo -e "${YELLOW}  ‚Ä¢ Checking backend/Dockerfile.simple...${NC}"
if ! docker run --rm -v $(pwd)/.hadolint.yaml:/.config/hadolint.yaml -i hadolint/hadolint < backend/Dockerfile.simple; then
    echo -e "${RED}‚ùå Dockerfile.simple linting failed!${NC}"
    echo -e "${YELLOW}üí° Check Docker best practices: ${GREEN}make docker-lint${NC}"
    # Don't exit on Docker issues - just warn
fi

echo -e "${YELLOW}üîí Security checks...${NC}"

echo -e "${YELLOW}  ‚Ä¢ Running security scan with Checkov...${NC}"
if ! docker run --rm -v $(pwd):/tf bridgecrew/checkov -d /tf --framework dockerfile --quiet; then
    echo -e "${RED}‚ùå Security scan found issues!${NC}"
    echo -e "${YELLOW}üí° Run full security scan: ${GREEN}make security-scan${NC}"
    # Don't exit on security issues - just warn
fi

echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
echo -e "${GREEN}üöÄ Proceeding with commit...${NC}"